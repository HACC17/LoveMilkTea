"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk = require("chalk");
const serve_1 = require("../serve");
const errors_1 = require("../errors");
const utils_1 = require("./utils");
function serve({ env, options }) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { getAvailableIPAddresses } = yield Promise.resolve().then(function () { return require('../utils/network'); });
        let externalIP = options.address;
        if (options.address === serve_1.BIND_ALL_ADDRESS) {
            const availableIPs = getAvailableIPAddresses();
            if (availableIPs.length === 0) {
                throw new Error(`It appears that you do not have any external network interfaces. ` +
                    `In order to use livereload with emulate you will need one.`);
            }
            externalIP = availableIPs[0].address;
            if (options.externalAddressRequired && availableIPs.length > 1) {
                if (availableIPs.find(({ address }) => address === options.address)) {
                    externalIP = options.address;
                }
                else {
                    env.log.warn('Multiple network interfaces detected!\n' +
                        'You will be prompted to select an external-facing IP for the livereload server that your device or emulator has access to.\n' +
                        `You may also use the ${chalk.green('--address')} option to skip this prompt.\n`);
                    const promptedIp = yield env.prompt({
                        type: 'list',
                        name: 'promptedIp',
                        message: 'Please select which IP to use:',
                        choices: availableIPs.map(ip => ip.address)
                    });
                    externalIP = promptedIp;
                }
            }
        }
        const appScriptsArgs = yield serveOptionsToAppScriptsArgs(options);
        process.argv = ['node', 'appscripts'].concat(appScriptsArgs);
        const AppScripts = yield utils_1.importAppScripts(env);
        const context = AppScripts.generateContext();
        // using app-scripts and livereload is requested
        // Also remove commandName from the rawArgs passed
        env.log.info(`Starting app-scripts server: ${chalk.bold(appScriptsArgs.join(' '))} - Ctrl+C to cancel`);
        const settings = yield AppScripts.serve(context);
        if (!settings) {
            throw new errors_1.FatalException(`app-scripts serve unexpectedly failed.` +
                `settings: ${settings}` +
                `context: ${context}`);
        }
        return {
            protocol: 'http',
            localAddress: 'localhost',
            externalAddress: externalIP,
            port: settings.httpPort,
            externallyAccessible: ![serve_1.BIND_ALL_ADDRESS, ...serve_1.LOCAL_ADDRESSES].includes(externalIP),
        };
    });
}
exports.serve = serve;
function serveOptionsToAppScriptsArgs(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { minimistOptionsToArray } = yield Promise.resolve().then(function () { return require('../utils/command'); });
        const minimistArgs = {
            _: [],
            address: options.address,
            port: String(options.port),
            livereloadPort: String(options.livereloadPort),
            consolelogs: options.consolelogs,
            serverlogs: options.serverlogs,
            nobrowser: !options.browser,
            nolivereload: !options.livereload,
            noproxy: !options.proxy,
            lab: options.lab,
            browser: options.browserName,
            browseroption: options.browserOption,
            iscordovaserve: options.iscordovaserve,
            platform: options.platform,
            target: options.target,
        };
        return minimistOptionsToArray(minimistArgs, { useEquals: false });
    });
}
exports.serveOptionsToAppScriptsArgs = serveOptionsToAppScriptsArgs;
