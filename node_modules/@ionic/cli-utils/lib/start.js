"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const chalk = require("chalk");
const fs_1 = require("./utils/fs");
function isProjectNameValid(name) {
    return name !== '.';
}
exports.isProjectNameValid = isProjectNameValid;
/**
 * If project only contains files generated by GH, it’s safe.
 * We also special case IJ-based products .idea because it integrates with CRA:
 * https://github.com/facebookincubator/create-react-app/pull/368#issuecomment-243446094
 */
function isSafeToCreateProjectIn(root) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const validFiles = [
            '.DS_Store', 'Thumbs.db', '.git', '.gitignore', '.idea', 'README.md', 'LICENSE'
        ];
        const entries = yield fs_1.fsReadDir(root);
        return entries.every((file) => {
            return validFiles.indexOf(file) >= 0;
        });
    });
}
exports.isSafeToCreateProjectIn = isSafeToCreateProjectIn;
function getStarterTemplateText(templateList) {
    let headerLine = chalk.bold(`Ionic Starter templates`);
    let formattedTemplateList = getStarterTemplateTextList(templateList);
    return `
    ${headerLine}
      ${formattedTemplateList.join(`
      `)}
  `;
}
exports.getStarterTemplateText = getStarterTemplateText;
function getStarterTemplateTextList(templateList) {
    return templateList.map(({ name, type, description }) => {
        let templateName = chalk.green(name);
        return `${templateName} ${Array(20 - name.length).join(chalk.dim('.'))} ${chalk.bold(type)} ${description}`;
    });
}
exports.getStarterTemplateTextList = getStarterTemplateTextList;
function getHelloText() {
    return `
${chalk.bold('♬ ♫ ♬ ♫  Your Ionic app is ready to go! ♬ ♫ ♬ ♫')}

${chalk.bold('Run your app in the browser (great for initial development):')}
  ${chalk.green('ionic serve')}

${chalk.bold('Run on a device or simulator:')}
  ${chalk.green('ionic cordova run ios')}

${chalk.bold('Test and share your app on a device with the Ionic View app:')}
  http://view.ionic.io
  `;
}
exports.getHelloText = getHelloText;
function patchPackageJsonForCli(env, appName, starterType, pathToProject) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const patchPackagePath = path.resolve(pathToProject, 'patch.package.json');
        const packagePath = path.resolve(pathToProject, 'package.json');
        let pkg;
        let patch;
        try {
            pkg = yield fs_1.fsReadJsonFile(packagePath);
        }
        catch (e) {
            if (e === fs_1.ERROR_FILE_NOT_FOUND) {
                throw new Error(`${packagePath} is not valid JSON.`);
            }
            else if (e === fs_1.ERROR_FILE_INVALID_JSON) {
                throw new Error(`${packagePath} is not valid JSON.`);
            }
            throw e;
        }
        try {
            patch = yield fs_1.fsReadJsonFile(patchPackagePath);
            const merge = yield Promise.resolve().then(function () { return require('lodash/merge'); });
            let finalPackage = merge(pkg, patch);
            yield fs_1.fsWriteJsonFile(packagePath, finalPackage, { encoding: 'utf8' });
            fs_1.fsUnlink(patchPackagePath); // no await
        }
        catch (e) {
            if (e === fs_1.ERROR_FILE_NOT_FOUND) {
                // no need to do anything
            }
            else if (e === fs_1.ERROR_FILE_INVALID_JSON) {
                throw new Error(`${patchPackagePath} is not valid JSON.`);
            }
            else {
                throw e;
            }
        }
    });
}
exports.patchPackageJsonForCli = patchPackageJsonForCli;
function updatePackageJsonForCli(env, appName, starterType, pathToProject) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const filePath = path.resolve(pathToProject, 'package.json');
        try {
            let jsonStructure = yield fs_1.fsReadJsonFile(filePath);
            jsonStructure['name'] = appName;
            jsonStructure['version'] = '0.0.1';
            jsonStructure['description'] = 'An Ionic project';
            yield fs_1.fsWriteJsonFile(filePath, jsonStructure, { encoding: 'utf8' });
        }
        catch (e) {
            if (e === fs_1.ERROR_FILE_NOT_FOUND) {
                throw new Error(`${filePath} not found`);
            }
            else if (e === fs_1.ERROR_FILE_INVALID_JSON) {
                throw new Error(`${filePath} is not valid JSON.`);
            }
            throw e;
        }
    });
}
exports.updatePackageJsonForCli = updatePackageJsonForCli;
function createProjectConfig(appName, starterType, pathToProject) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const filePath = path.resolve(pathToProject, 'ionic.config.json');
        const jsonStructure = {
            name: appName,
            app_id: '',
            type: starterType.id
        };
        yield fs_1.fsWriteJsonFile(filePath, jsonStructure, { encoding: 'utf8' });
    });
}
exports.createProjectConfig = createProjectConfig;
exports.STARTER_TYPES = [
    {
        id: 'ionic-angular',
        name: 'v2',
        baseArchive: 'https://github.com/ionic-team/ionic2-app-base/archive/<BRANCH_NAME>.tar.gz',
        globalDependencies: [],
        localDependencies: [],
    },
    {
        id: 'ionic1',
        name: 'v1',
        baseArchive: 'https://github.com/ionic-team/ionic-app-base/archive/<BRANCH_NAME>.tar.gz',
        globalDependencies: [],
        localDependencies: [],
    },
];
exports.STARTER_TEMPLATES = [
    {
        name: 'tabs',
        type: 'ionic-angular',
        description: 'A starting project with a simple tabbed interface',
        path: 'ionic-team/ionic2-starter-tabs',
        archive: 'https://github.com/ionic-team/ionic2-starter-tabs/archive/<BRANCH_NAME>.tar.gz'
    },
    {
        name: 'blank',
        type: 'ionic-angular',
        description: 'A blank starter project',
        path: 'ionic-team/ionic2-starter-blank',
        archive: 'https://github.com/ionic-team/ionic2-starter-blank/archive/<BRANCH_NAME>.tar.gz'
    },
    {
        name: 'sidemenu',
        type: 'ionic-angular',
        description: 'A starting project with a side menu with navigation in the content area',
        path: 'ionic-team/ionic2-starter-sidemenu',
        archive: 'https://github.com/ionic-team/ionic2-starter-sidemenu/archive/<BRANCH_NAME>.tar.gz'
    },
    {
        name: 'super',
        type: 'ionic-angular',
        description: 'A starting project complete with pre-built pages, providers and best practices for Ionic development.',
        path: 'ionic-team/ionic-starter-super',
        archive: 'https://github.com/ionic-team/ionic-starter-super/archive/<BRANCH_NAME>.tar.gz'
    },
    {
        name: 'conference',
        type: 'ionic-angular',
        description: 'A project that demonstrates a realworld application',
        path: 'ionic-team/ionic-conference-app',
        archive: 'https://github.com/ionic-team/ionic-conference-app/archive/<BRANCH_NAME>.tar.gz'
    },
    {
        name: 'tutorial',
        type: 'ionic-angular',
        description: 'A tutorial based project that goes along with the Ionic documentation',
        path: 'ionic-team/ionic2-starter-tutorial',
        archive: 'https://github.com/ionic-team/ionic2-starter-tutorial/archive/<BRANCH_NAME>.tar.gz'
    },
    {
        name: 'aws',
        type: 'ionic-angular',
        description: 'AWS Mobile Hub Starter',
        path: 'ionic-team/ionic2-starter-aws',
        archive: 'https://github.com/ionic-team/ionic2-starter-aws/archive/<BRANCH_NAME>.tar.gz'
    },
    {
        name: 'tabs',
        type: 'ionic1',
        description: 'A starting project for Ionic using a simple tabbed interface',
        path: 'ionic-team/ionic-starter-tabs',
        archive: 'https://github.com/ionic-team/ionic-starter-tabs/archive/<BRANCH_NAME>.tar.gz'
    },
    {
        name: 'blank',
        type: 'ionic1',
        description: 'A blank starter project for Ionic',
        path: 'ionic-team/ionic-starter-blank',
        archive: 'https://github.com/ionic-team/ionic-starter-blank/archive/<BRANCH_NAME>.tar.gz'
    },
    {
        name: 'sidemenu',
        type: 'ionic1',
        description: 'A starting project for Ionic using a side menu with navigation in the content area',
        path: 'ionic-team/ionic-starter-sidemenu',
        archive: 'https://github.com/ionic-team/ionic-starter-sidemenu/archive/<BRANCH_NAME>.tar.gz'
    },
    // {
    //   name: 'complex-list',
    //   type: 'ionic1',
    //   description: 'A complex list starter template',
    //   path: 'ionic-team/ionic-starter-maps',
    //   archive: 'https://github.com/ionic-team/ionic-starter-complex-list/archive/<BRANCH_NAME>.tar.gz'
    // },
    {
        name: 'maps',
        type: 'ionic1',
        description: 'An Ionic starter project using Google Maps and a side menu',
        path: 'ionic-team/ionic-starter-maps',
        archive: 'https://github.com/ionic-team/ionic-starter-maps/archive/<BRANCH_NAME>.tar.gz'
    },
];
