{"version":3,"sources":["../../../src/@ionic-native/core/util.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,CAAC,IAAM,GAAG,GAAG,UAAC,OAAyB,EAAE,IAAY;IACzD,IAAM,KAAK,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACxC,IAAI,GAAG,GAAQ,OAAO,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC9C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAAC,CAAC;QAC1B,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC;IACD,MAAM,CAAC,GAAG,CAAC;AACb,CAAC,CAAC;AAGF;;GAEG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,UAAC,QAAkB;IAE3C,IAAM,gBAAgB,GAAG;QACvB,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,0LAA0L,CAAC,CAAC;QAC5M,CAAC;IACH,CAAC,CAAC;IAEF,MAAM,CAAC,gBAAgB,EAAE,CAAC;AAC5B,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,SAAiB;IACzC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAChC,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,UAAC,UAAkB,EAAE,MAAe,EAAE,MAAe;IAC7E,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACX,OAAO,CAAC,IAAI,CAAC,wBAAwB,GAAG,UAAU,GAAG,GAAG,GAAG,MAAM,GAAG,YAAY,GAAG,UAAU,GAAG,2BAA2B,CAAC,CAAC;IAC/H,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,OAAO,CAAC,IAAI,CAAC,8BAA8B,GAAG,UAAU,GAAG,kCAAkC,CAAC,CAAC;IACjG,CAAC;IACD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACX,OAAO,CAAC,IAAI,CAAC,cAAc,GAAG,UAAU,GAAG,sCAAsC,GAAG,MAAM,GAAG,IAAI,CAAC,CAAC;IACrG,CAAC;AACH,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,UAAkB,EAAE,MAAe;IAC7D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACX,OAAO,CAAC,IAAI,CAAC,wBAAwB,GAAG,UAAU,GAAG,GAAG,GAAG,MAAM,GAAG,8FAA8F,CAAC,CAAC;IACtK,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,OAAO,CAAC,IAAI,CAAC,8BAA8B,GAAG,UAAU,GAAG,oGAAoG,CAAC,CAAC;IACnK,CAAC;AACH,CAAC,CAAC","file":"util.js","sourceRoot":"","sourcesContent":["declare const window: any;\n\n/**\n * @private\n */\nexport const get = (element: Element | Window, path: string): any => {\n  const paths: string[] = path.split('.');\n  let obj: any = element;\n  for (let i: number = 0; i < paths.length; i++) {\n    if (!obj) { return null; }\n    obj = obj[paths[i]];\n  }\n  return obj;\n};\n\n\n/**\n * @private\n */\nexport const getPromise = (callback: Function): Promise<any> => {\n\n  const tryNativePromise = () => {\n    if (window.Promise) {\n      return new Promise((resolve, reject) => {\n        callback(resolve, reject);\n      });\n    } else {\n      console.error('No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular or on a recent browser.');\n    }\n  };\n\n  return tryNativePromise();\n};\n\n/**\n * @private\n * @param pluginRef\n * @returns {null|*}\n */\nexport const getPlugin = (pluginRef: string): any => {\n  return get(window, pluginRef);\n};\n\n/**\n * @private\n */\nexport const pluginWarn = (pluginName: string, plugin?: string, method?: string): void => {\n  if (method) {\n    console.warn('Native: tried calling ' + pluginName + '.' + method + ', but the ' + pluginName + ' plugin is not installed.');\n  } else {\n    console.warn('Native: tried accessing the ' + pluginName + ' plugin but it\\'s not installed.');\n  }\n  if (plugin) {\n    console.warn('Install the ' + pluginName + ' plugin: \\'ionic cordova plugin add ' + plugin + '\\'');\n  }\n};\n\n/**\n * @private\n * @param pluginName\n * @param method\n */\nexport const cordovaWarn = (pluginName: string, method?: string): void => {\n  if (method) {\n    console.warn('Native: tried calling ' + pluginName + '.' + method + ', but Cordova is not available. Make sure to include cordova.js or run in a device/simulator');\n  } else {\n    console.warn('Native: tried accessing the ' + pluginName + ' plugin but Cordova is not available. Make sure to include cordova.js or run in a device/simulator');\n  }\n};\n"]}